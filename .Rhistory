library(e1071)
fit<-svm(state~.,data=train,kernel="polynomial",degree=2,gamma=1,cost=0.1,coef0=1)
total<-100000
lambda<-runif(total,min=0,max=10)
miu<-runif(total,min=0,max=1)
r_wifi<-32
r_lifi<-runif(total,min=2900,max=3200)
t_h<-0.00833
data<-cbind(lambda,miu,r_lifi)
data<-as.data.frame(data)
k1<-r_wifi
k2<-(1-miu)*(r_lifi)
k3<-1:total
for(i in 1:total){
k3[i]<-(max(miu[i]-(lambda[i]*t_h),0)*(r_wifi))+(max(1-miu[i]-(lambda[i]*t_h),0)*(r_lifi[i]))
}
state<-1:total
for(i in 1:total){
if(k1>=k2[i] && k1>=k3[i])
{
state[i]=1
}
else if(k2[i]>=k1 && k2[i]>=k3[i])
{
state[i]=2
}
else if(k3[i]>=k1 && k3[i]>=k2[i])
{
state[i]=3
}
}
data$state<-state
library(caret)
intrain<-createDataPartition(data$state,p=0.7,list=FALSE)
train<-data[intrain,]
test<-data[-intrain,]
library(e1071)
fit<-svm(state~.,data=train,kernel="polynomial",degree=2,gamma=1,cost=0.1,coef0=1)
fit
pre<-predict(fit,test)
head(pre)
total<-100000
lambda<-runif(total,min=0,max=10)
miu<-runif(total,min=0,max=1)
r_wifi<-32
r_lifi<-runif(total,min=2900,max=3200)
t_h<-0.00833
data<-cbind(lambda,miu,r_lifi)
data<-as.data.frame(data)
k1<-r_wifi
k2<-(1-miu)*(r_lifi)
k3<-1:total
for(i in 1:total){
k3[i]<-(max(miu[i]-(lambda[i]*t_h),0)*(r_wifi))+(max(1-miu[i]-(lambda[i]*t_h),0)*(r_lifi[i]))
}
state<-1:total
for(i in 1:total){
if(k1>=k2[i] && k1>=k3[i])
{
state[i]=1
}
else if(k2[i]>=k1 && k2[i]>=k3[i])
{
state[i]=2
}
else if(k3[i]>=k1 && k3[i]>=k2[i])
{
state[i]=3
}
}
data$state<-as.factor(state)
library(caret)
intrain<-createDataPartition(data$state,p=0.7,list=FALSE)
train<-data[intrain,]
test<-data[-intrain,]
str(data)
library(e1071)
fit<-svm(state~.,data=train,kernel="polynomial",degree=2,gamma=1,cost=0.1,coef0=1)
fit
pre<-predict(fit,test)
head(pre)
confusionMatrix(pre,test$state)
head(data)
hist(data$state)
total<-100000
lambda<-runif(total,min=0,max=10)
miu<-runif(total,min=0,max=1)
r_wifi<-32
r_lifi<-runif(total,min=2900,max=3200)
t_h<-0.00833
data<-cbind(lambda,miu,r_lifi)
data<-as.data.frame(data)
k1<-r_wifi
k2<-(1-miu)*(r_lifi)
k3<-1:total
for(i in 1:total){
k3[i]<-(max(miu[i]-(lambda[i]*t_h),0)*(r_wifi))+(max(1-miu[i]-(lambda[i]*t_h),0)*(r_lifi[i]))
}
state<-1:total
for(i in 1:total){
if(k1>=k2[i] && k1>=k3[i])
{
state[i]=1
}
else if(k2[i]>=k1 && k2[i]>=k3[i])
{
state[i]=2
}
else if(k3[i]>=k1 && k3[i]>=k2[i])
{
state[i]=3
}
}
data$state<-as.factor(state)
library(caret)
intrain<-createDataPartition(data$state,p=0.7,list=FALSE)
train<-data[intrain,]
test<-data[-intrain,]
library(e1071)
fit<-svm(state~.,data=train,kernel="polynomial",degree=2,gamma=1,cost=0.1,coef0=1)
fit2<-train(state~.,data=train,method="rf")
pre2<-predict(fit2,test);
confusionMatrix(pre2,test$state)
pre<-predict(fit,test)
confusionMatrix(pre,test$state)
sum(data$state==3)
6092/100000
fit
pre1<-predict(fit,train)
library(Caret)
library(caret)
pre1<-predict(fit,train)
head(train)
head(test)
pre<-predict(fit,test)
library(e1071)
pre<-predict(fit,test)
pre1<-predict(fit,train)
pre2<-predict(fit,test)
pre1<-as.numeric(pre1)
pre2<-as.numeric(pre2)
ac1<-as.numeric(train$state)
ac2<-as.numeric(test$state)
tr<-cor(pre1,ac1)^2
te<-cor(pre2,ac2)^2
tr-te
confusionMatrix(pre2,test$state)
library(caret)
confusionMatrix(pre2,test$state)
pre2
confusionMatrix(pre,test$state)
confusionMatrix(pre2,test$state)
pre
pre2
pre2<-as.factor(pre2)
confusionMatrix(pre2,test$state)
pre1<-predict(fit,train)
library(caret)
library(e1071)
pre1<-predict(fit,train)
pre2<-predict(fit,test)
pre1<-as.numeric(pre1)
pre2<-as.numeric(pre2)
ac1<-as.numeric(train$state)
ac2<-as.numeric(test$state)
tr<-cor(pre1,ac1)^2
te<-cor(pre2,ac2)^2
tr-te
sum(data$state==3)
